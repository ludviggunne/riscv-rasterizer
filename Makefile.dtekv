TARGET_TOOLS	= riscv32-unknown-elf- riscv64-unknown-elf- riscv64-linux-gnu- riscv64-none-elf-
PROGRAM_PREFIX	:= $(shell for i in $(TARGET_TOOLS); do if which $${i}gcc >/dev/null 2>&1; then echo $${i}; break; fi done)
CC 		= $(PROGRAM_PREFIX)gcc
OBJDUMP		= $(PROGRAM_PREFIX)objdump
OBJCOPY		= $(PROGRAM_PREFIX)objcopy
MACHFLAGS	= -mabi=ilp32 -march=rv32imzicsr
CPPFLAGS	= -Iinclude -Iinclude/dtekv -Ibuild
ASFLAGS		= $(MACHFLAGS)
CFLAGS		= $(MACHFLAGS) -fno-pic -g -Wall -O3 -fno-caller-saves -flto -fuse-linker-plugin
LDSCRIPT	= link.ld
LDFLAGS		= -T $(LDSCRIPT) -Llib -Llib/dtekv -nostdlib -Wl,-no-pie,--build-id=none,--no-warn-rwx-segments
LDLIBS		= -ldtekv
BUILDDIR	= build/dtekv/
RAST_ELF	= $(BUILDDIR)rast.elf
RAST_BIN	= $(BUILDDIR)rast.bin

ifneq ($(PROFILE_FRAMES),)
CPPFLAGS	+= -DPROFILE_ENABLE -DPROFILE_FRAMES=$(PROFILE_FRAMES)
else ifneq ($(PROFILE),)
CPPFLAGS	+= -DPROFILE_ENABLE
endif
ifneq ($(MODEL),)
CPPFLAGS	+= -DDEFAULT_MODEL=$(MODEL)
endif

.PHONY: all clean

all: $(RAST_BIN)

clean:
	rm -f $(RAST_ELF) $(RAST_BIN)

$(BUILDDIR):
	mkdir -p $(@)

$(RAST_ELF): src/dtekv/abort.c src/dtekv/button.c src/dtekv/ctrl.c \
	src/dtekv/display.c src/dtekv/init.c src/dtekv/irq.c src/dtekv/main.c \
	src/dtekv/mvec.S src/dtekv/perf.c src/dtekv/perf_json.c \
	src/dtekv/reset.S src/dtekv/stack.S src/dtekv/start.S \
	src/dtekv/stop.S src/dtekv/switch.c src/dtekv/timer.c \
	src/dtekv/trap.S src/dtekv/vga.c src/model.c src/qmath.c src/rast.c \
	src/uart.c | $(BUILDDIR)
	$(CC) -o $(@) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) $(^) $(LDLIBS)

$(RAST_BIN): $(RAST_ELF) | $(BUILDDIR)
	$(OBJCOPY) -S -O binary $(<) $(@)
