TARGET_TOOLS	= riscv32-unknown-elf- riscv64-unknown-elf- riscv64-linux-gnu-
PROGRAM_PREFIX	:= $(shell for i in $(TARGET_TOOLS); do if which $${i}gcc >/dev/null 2>&1; then echo $${i}; break; fi done)
CC 		= $(PROGRAM_PREFIX)gcc
OBJDUMP		= $(PROGRAM_PREFIX)objdump
OBJCOPY		= $(PROGRAM_PREFIX)objcopy
MACHFLAGS	= -mabi=ilp32 -march=rv32imzicsr
CPPFLAGS	= -Iinclude -Iinclude/target -Ibuild
ASFLAGS		= $(MACHFLAGS)
CFLAGS		= $(MACHFLAGS) -fno-pic -g -Wall -O3 -flto -fuse-linker-plugin
LDSCRIPT	= link.ld
LDFLAGS		= -T $(LDSCRIPT) -Llib -Llib/target -nostdlib -Wl,-no-pie,--build-id=none,--no-warn-rwx-segments
LDLIBS		= -ldtekv
BUILDDIR	= build/target/
RAST_ELF	= $(BUILDDIR)rast.elf
RAST_BIN	= $(BUILDDIR)rast.bin

.PHONY: all clean

all: $(RAST_BIN)

clean:
	rm -f $(RAST_ELF) $(RAST_BIN)

$(BUILDDIR):
	mkdir -p $(@)

$(RAST_ELF): src/target/display.c src/target/main.c src/model.c \
	src/target/mvec.S src/qmath.c src/rast.c src/target/reset.S \
	src/target/stack.S src/target/start.S src/target/stop.S \
	src/target/trap.S src/uart.c src/vmath.c | $(BUILDDIR)
	$(CC) -o $(@) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) $(^) $(LDLIBS)

$(RAST_BIN): $(RAST_ELF) | $(BUILDDIR)
	$(OBJCOPY) -S -O binary $(<) $(@)
